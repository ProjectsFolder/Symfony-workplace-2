security:
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\InMemoryUser: 'auto'

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        keycloak_user_provider:
            id: App\Security\KeycloakUserProvider
        backend_users:
            memory:
                users:
                    user: { password: '$2y$13$CZDhB2E0r/whodv6K.IANOMeQwPf2mKY1pUIeRqVfaQT2OpZLUnTC', roles: [ 'ROLE_ADMIN' ] }
                    admin: { password: '$2y$13$CZDhB2E0r/whodv6K.IANOMeQwPf2mKY1pUIeRqVfaQT2OpZLUnTC', roles: [ 'ROLE_USER' ] }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        keycloak:
            pattern: ^/keycloak
            provider: keycloak_user_provider
            form_login:
                login_path: /keycloak/auth
                check_path: /keycloak/auth
            custom_authenticators:
                - App\Security\KeycloakAuthenticator
        main:
            lazy: true
            provider: backend_users
            custom_authenticators:
                - App\Security\UserAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/ws, roles: ROLE_USER }
        # - { path: ^/profile, roles: ROLE_USER }
